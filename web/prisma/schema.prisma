// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int @default(autoincrement()) @unique
  username      String
  email         String
  password      String
  createdAt     DateTime @default(now())
  
  //relations
  comments      Comments[]
  videos        VideoMetadata[]
  replies       Replies[]
  feedback      Feedback[]
}

model VideoMetadata{
  id            Int @default(autoincrement()) @unique
  thumbnail     String?
  title         String
  views         Int?
  likes         Int?
  isPublic      Boolean @default(false)
  channelName   String?
  description   String
  src           String?
  userId        Int?
  user          User? @relation(fields: [userId] , references: [id])
  comments      Comments[]
  feedback      Feedback[]
  createdAt     DateTime @default(now())
}

model Comments {
  id            Int @default(autoincrement()) @unique
  text          String
  likes         Int
  createdAt     DateTime @default(now()) 
  
  //relations
  user          User @relation(fields: [userId], references: [id])
  userId        Int
  video         VideoMetadata @relation(fields: [videoId] , references:[id])
  videoId       Int
  replies       Replies[]
  feedback      Feedback[]
}

model Replies {
    id          Int @default(autoincrement()) @unique
    text        String
    likes       Int
    createdAt   DateTime @default(now())

    //relation
    comment     Comments @relation(fields: [commentId] , references:[id])
    commentId   Int
    user        User @relation(fields: [userId] , references: [id])
    userId      Int
    feedback    Feedback[]
  }

model Channel {
    id          Int @default(autoincrement()) @unique
    name        String
    subscribers Int
    banner      String
    logo        String
    description String
    createdAt   DateTime @default(now())
  }

model Feedback {
    id          Int @default(autoincrement()) @unique
    video       VideoMetadata? @relation(fields:[videoId] , references:[id])
    videoId     Int?
    comment     Comments? @relation(fields:[commentId] , references:[id])
    commentId   Int?
    reply       Replies? @relation(fields:[replyId] , references:[id])
    replyId     Int?
    user        User @relation(fields:[userId], references:[id])
    userId      Int
    feedbackType    FeedbackType
    createdAt   DateTime @default(now())
    
   @@unique([videoId, userId])
   @@unique([commentId, userId])
   @@unique([replyId, userId])

  }

enum FeedbackType {
    LIKE 
    DISLIKE
  }
